package ex20221123

fun main() {

    //람다 대수
    //수학: 이름이 없는 함수 또는 두 개 이상의 수를 한 개의 결과값으로 단순화
    //프로그래밍: 다른 함수의 인자로 넘기는 함수(매개변수), 함수의 결과값으로 반환 가능(리턴값), 🌟변수에 저장하는 함수를 의미🌟

    //람다식의 형태
    //{매개변수 -> 리턴값}
    {x:Int, y:Int -> x+y} //람다 대수

    //람다식을 쓰고 싶다면?!
        //변수에 저장해서 사용할 수 있음
    //람다식을 변수에 담을 땐 매개변수가 가지고 있는 자료형 타입과 리턴타입의 자료형을 적어줘야 함
    //val sum:(매개변수 자료형, 매개변수 자료형) -> 리턴타입 자료형 = {람다식}
    val sum:(Int, Int) -> Int = {x:Int, y:Int -> x+y}

    println(sum(3,4))//람다식 변수 출력하기 => 7 출력

    //식 간소화 하기!
    //첫 번째 방법
        //람다식의 매개변수에 자료형이 지정되어 있다면 변수에서 자료형을 생략할 수 있음!
    val sum1={x:Int, y:Int -> x+y}

    //두 번째 방법
        //변수에 자료형이 지정되어 있다면 람다식의 매개변수 자료형은 생략할 수 있음!
    val sum2:(Int, Int) -> Int = {x, y -> x+y}

    //단, 람다식과 변수의 자료형을 둘 다 생략하면 추론이 불가능하기 때문에 오류남!

    //기존 함수 람다식으로 변환하기
    //hello라는 변수에 아래 함수를 람다식으로 담아주세요
    fun greet():Unit{
        println("Hello Kotlin")
    }
    //람다식
    //val/var 변수명: (람다식 매개변수의 자료형) -> 리턴타입 = {람다식}
//    val hello:(String)->String = {x -> x}
    val hello: () -> Unit = { println("Hello Kotlin") }
    hello()



    //다음은 정사각형의 넓이를 구하는 함수입니다 람다식으로 바꿔주세요
    //( square2 변수 선언)
    fun square1(x:Int): Int{
        return x*x
    }

    //람다식
    val square2: (Int) -> Int = {x -> x*x}
    println(square2(4))

}